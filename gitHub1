clase 19
Vamos a agregar un origen remoto de nuestros archivos
Esto lo hacemos con 
git remote add origin direccion del git hub https

git remote -> ahora existe algo llamado origin
si le damos 
git remote -v

git push origin main -> Git enviele al origen la rama main

Integrar los cambios remotos antes de hacer un push
En el mundo remoto no sabemos que se pudo haber hecho

git pull origin master --allow-unrelated-histories

De esta manera permite funcionar lo que habia alla con nuestra rama local.

Funcionamiento de llaves publicas y privadas
Cifrado asimetrico de un solo camino-> 
Llave publica
Llave privadas

Están vinculadas matematicamente una con la otra, significa loq ue yo cifre con mi 
llave publica solo lo abre mi llave privada.

Las llaves públicas y privadas, conocidas tambien como cifrado asimétrico de un solo camino,
sriven para mandar mensajes privados entre varios nodos con la lógica
de que firmas tu mensaje con una llave pública vinculada con una llave privada que puede leer el mensaje.

Las llaves públicas y privadas nos ayudan a cifrar y descifrar nuestros archivos de forma que los podemos compartir sin correr el riesgo de que sean interceptados por personas con malas intenciones.

COMO FUNCINOA UN MENSAJE CIFRADO CON LLAVES PUBLOCAS Y PRIVADAS
1. Ambas personas deben crear su llave pública y privada.
2. Ambas personas pueden compartir su llave pública a las otras partes (recuerda que esta llave es pública, no hay problemas si la "interceptan")
3. La persona que quiere compartir un mensaje puede usar la llave publica de la otra persona para cifrar los archvios y asegurarse que solo pueden ser descifrados con la llave privadad de la persona con la que queremos compartir el mensaje.
4. El mensaje está cifrado y puede ser enviado a la otra persona sin problemas en caso de que los archivos sean interceptados.
5. La persona a la que enviamos el mensaje cifrado puede emplear su llave privada para descifrar el mensaje y ver los archivos.

git config -l
para ver mi configuracion de git

para cambiar el email registrado en git
git config --global user.email "email de github"

Crear la llave ssh
ssh-keygen -t rsa -b 4096 -c "email de git hub" -> generar la llave  -t = espscificar el algotimo para generar esa llave rsa = es el algoritmo -b que tan compleja es la llave

En windows revisar que el servidor de llaves ssh este prendido
Es basicamente un programa que revise que las llaves esten corriendo
eval $(ssh-agent -s)  evaluando que un comando se dispare

Agregar la llave a nuestros sistema 
.ssh  

Agregar la llave
ssh-add ~/.ssh/id_rsa (depende donde guardemoos la llave ssh siempre agregar la llave privada)

TAGS Y VERSIONES EN GIT GITHUB
git log --all -> Nos mostrara todo lo que hemos hecho historicamente

git log --all --graph -> Nos muestra unas rayas de como han funcionado las ramas 

git log --all --graph --decorate --oneline ->toda la historia de nuestro proyecto, nos mustra todo mucho más comprimido

crear un alias
alias arbolito = "git log --all --graph --decorate --oneline"

Crear un tag
con la versión un mensaje del tag y el commit de referencia del tag
git tag -a v0.1 -m "Resultado de las primeras clases del curso" c533828

git tag 
Para poder los tags creados
Los tags no son cambios
Son utiles en git hub en el sitio web, para saber que version


git push origing --tags  -> Le envio a github todos los tags

borrar un tag
git tag -d "nombre del tag"
La razón por la que no se borra  de manera automatica en git hub es porque los tags se pueden usar como releases es la manera en la que categorizamos que algo esta listo aunque lo borremos internamente sigue en github

git push origin :refs/tags/dormido
Es una sintaxis que borra la referencia en el origen con nuestra referencia 
