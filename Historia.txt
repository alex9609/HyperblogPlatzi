git init - para crear un nuevo repositorio
git status - para ver el estado actual del repositorio
git log <file> - para ver la información del repositorio, como autor y techa
git config - para editar las variables de entorno de github como usuario e email
donde voy a trabajar.
git show - para mostrar los cambios sobre un archivo, muestra ultimo commit
diff - version anterior y version nueva

indicador de bytes @@ -1.5 +1.6 @@
Cuando esta en rojo es porque hemos eliminado algo o cambiado esa linea de codigo
En verde muestra los cmabios añadidos

Chached - significa que esta en memoria ram,
git rm --Chached archivo nos sirve para borrar el archivo del add
si en algún momento nos equivocamo

si solo escribimos git commit - automaticamente nos abre vim para escribir un mensaje
en el commit - buenas practicas
para salir de esta consola de vim escribimos esc+shift+zz

git diff - para ver los cambios de un commit  a otro
copiamos el codido del commit 1 espacio commmit2
la version mas vieja de primera y la version mas reciente de segunda
Asume que la primera es la original y la segunda es la más nueva

Stagging es donde vamos a ir agregando los cambios donde se crea al repositorio
una vez hecho el cambio, agregamos los cambios al stagging usando git add
el archvio esta esperando en la memoria ram en el stagging.
Usando el commit -m el arhivo se va al repositorio - tiene un nombre por defecto 
llamado master.

Untrack cuando no hemos hecho el git add (sint rastrear)
una vez le damos add . esa modificacion se va al stagging

Staging es un area de preparación es un area temporal antes de enviar los cambios al repesitorio
commit -m pasan de estar trackeados en staging a trackeados en el repositorio

para traer los commits a la carpeta usamos el 
git checkout - traemos todos los cambios ciertos cambios.

git reset HEAD: nos ayuda a sacar archivos del estado Staged para devolverlos a su estado anterior.
Si los archivos venían de Unstaged, vuelven allí. Y lo mismo se venían de Untracked.

git rm: este comando necesita alguno de los siguientes argumentos para poder ejecutarse correctamente:
- git rm --cached: Mueve los archivos que le indiquemos al estado Untracked.
- git rm --force: Elimina los archivos de Git y del disco duro. Git guarda el registro de la existencia 
de los archivos, por lo que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados).

hotfix - arreglo en caliente cuando algo falla, es una rama que se crea para corregir un 
archivo que se dañe

git merge - es el comando para unir una rama con otra, para hacer una version final
conectada o la version HEAD.

git reset - nos permite volver a una versión anterior


git reset codigocommit --hard para que todo vuelva al estado anterior dependiendo del commit que le 
especifiquemos

git reset codigocommit --soft en el directorio de trabajo vuelve a la versión anterior dejando lo que 
este en staging listo para subir, quieto.

tener cuidado porque aquí borramos todo lo que hayamos hecho en el commit

git log --stat -> podremos ver los cambios especificos  que se hicieron en cuales archivos a partir del
commit

git checkout commit archivo podemos ver el archivo en su estado original
git checkout master archivo  volvemos a la version master del archivo  actualizado

git reset HEAD -> Es el comando para sacar archivos del area de sating. No para borrarlos
ni nada de eso, solo para que los últimos cambios de estes archivos no se envíen al último commit,
a menos que cambiemos de opinión y los incluyamos de nuevo en staging con git add.

