git init - para crear un nuevo repositorio
git status - para ver el estado actual del repositorio
git log <file> - para ver la información del repositorio, como autor y techa
git config - para editar las variables de entorno de github como usuario e email
donde voy a trabajar.
git show - para mostrar los cambios sobre un archivo, muestra ultimo commit
diff - version anterior y version nueva

indicador de bytes @@ -1.5 +1.6 @@
Cuando esta en rojo es porque hemos eliminado algo o cambiado esa linea de codigo
En verde muestra los cmabios añadidos

Chached - significa que esta en memoria ram,
git rm --Chached archivo nos sirve para borrar el archivo del add
si en algún momento nos equivocamo

si solo escribimos git commit - automaticamente nos abre vim para escribir un mensaje
en el commit - buenas practicas
para salir de esta consola de vim escribimos esc+shift+zz

git diff - para ver los cambios de un commit  a otro
copiamos el codido del commit 1 espacio commmit2
la version mas vieja de primera y la version mas reciente de segunda
Asume que la primera es la original y la segunda es la más nueva

Stagging es donde vamos a ir agregando los cambios donde se crea al repositorio
una vez hecho el cambio, agregamos los cambios al stagging usando git add
el archvio esta esperando en la memoria ram en el stagging.
Usando el commit -m el arhivo se va al repositorio - tiene un nombre por defecto 
llamado master.

Untrack cuando no hemos hecho el git add (sint rastrear)
una vez le damos add . esa modificacion se va al stagging

Staging es un area de preparación es un area temporal antes de enviar los cambios al repesitorio
commit -m pasan de estar trackeados en staging a trackeados en el repositorio

para traer los commits a la carpeta usamos el 
git checkout - traemos todos los cambios ciertos cambios.

git reset HEAD: nos ayuda a sacar archivos del estado Staged para devolverlos a su estado anterior.
Si los archivos venían de Unstaged, vuelven allí. Y lo mismo se venían de Untracked.

git rm: este comando necesita alguno de los siguientes argumentos para poder ejecutarse correctamente:
- git rm --cached: Mueve los archivos que le indiquemos al estado Untracked.
- git rm --force: Elimina los archivos de Git y del disco duro. Git guarda el registro de la existencia 
de los archivos, por lo que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados).

hotfix - arreglo en caliente cuando algo falla, es una rama que se crea para corregir un 
archivo que se dañe

git merge - es el comando para unir una rama con otra, para hacer una version final
conectada o la version HEAD.

git reset - nos permite volver a una versión anterior


git reset codigocommit --hard para que todo vuelva al estado anterior dependiendo del commit que le 
especifiquemos

git reset codigocommit --soft en el directorio de trabajo vuelve a la versión anterior dejando lo que 
este en staging listo para subir, quieto.

tener cuidado porque aquí borramos todo lo que hayamos hecho en el commit

git log --stat -> podremos ver los cambios especificos  que se hicieron en cuales archivos a partir del
commit

git checkout commit archivo podemos ver el archivo en su estado original
git checkout master archivo  volvemos a la version master del archivo  actualizado

git reset HEAD -> Es el comando para sacar archivos del area de sating. No para borrarlos
ni nada de eso, solo para que los últimos cambios de estes archivos no se envíen al último commit,
a menos que cambiemos de opinión y los incluyamos de nuevo en staging con git add.

El commit mas reciente es el HEAD.

git commit -am -> automaticamente hace el git add de los cambios, solo funciona con archvios a los 
que previamente he hecho add, si creo un archivo completamente nuevo esto no va a funcionar.

<<<<<<< HEAD
esc+i para poder escribir el texto en el vim

esc+shift+zz -> para salir del vim cuando generemos i escribamos el codigo de manera autonomica con git commit -a

la rama se creara desde el lugar donde estoy
=======
git checkout <branch> -> para cambiar el branch donde estemos trabajando

git clone ulr -> con la direccion del repositorio remoto se trae una copia del master a mi carpeta
y crea la base de datos de todos los cambios historicos en el repositorio y deja el staging quieto y listo

cuando estoy listo para que la utima version de los commit se envie al repositorio donde todo el mundo trabajando
hago un git pussh -> para enviar todo esto al servidor remoto y si hay conflictos
lidio con ellos.

git push - subir al repositorio remoto

git fetch -> Traer una actualizacion, lo trae el repositorio local pero no lo copia en mis archivos,
para que lo copi en mis archivos tengo que fusionar la ultima version del repositorio local con mi version actual
git merge ->

git pull -> Copio el repositorio local la base de datos de cambios y copia el directorio

git merge -> un merge siempre va a ocurrir en donde estpy, para hacer un merge en la rama donde estoy
si hago un merge estando en cabera con master, o que hago es enviar el ultimo commit del master hacia cabecera y se pierden 
los anteriores commits del master.

Si quiere que el merge se realice a la rama principal me ubico en esta rama y desde allí hago el merge
<<<<<<< HEAD
>>>>>>> cabecera
=======
Siempre el merge se realiza sobre la rama a la que queremos subir los merges
>>>>>>> cabecera

Hacer un merge alreves traer desde master a cabecera
nos ubicamos en el branch de cabecera y hacemos el merge

==================
Git nunca borra nada, a menos que nosotros le indiquemos.
Cuando usamos  los comandos git merge o git checkout estamos cambiando de rama o creando un nuevo commit,no borrando
ramas ni commits (recuerda que puedes borrar commits con git reset y ramas con git branch -d )

Git es muy inteligente y puede resolver algunos conflitcos automaticamente: 
cambios, nuevas lineas, entre otros. Pero algunas veces no sabe como resolver estas diferencias, por ejemplo, cuando dos ramas
diferentes hacen cambios distintos a una misma línea.

Esto lo conocemos como conflicto y lo podemos resolver manualmente.
Solo debemos hacer el merge, ir a nuestro editor de código y elegir si queremos quedarnos con alguna de estas dos versiones
o algo diferente. Algunos editores de código como visual studio code nos ayudan a resolver estos conflictos sin necesidad de 
borrar o escrbiri lineas de texto, basta con hacer clic en un botón y guardar el archivo.

Recuerda que siempre debemos crear un nuevo commit para aplicar los cambios del merge. Si git puede resolver el conflicto, hará commit
automaticamente. Pero, en caso de no pueda resolverlo, debemos solucionarlo y hacer el commit.

Los archivos con conflictos por el comando git merge entran en un nuevo estaod que conocemos como Unmerged. Funcionan muy parecido a los archivos
en estado Unstaged,algo así como un estado intermedio entre Untracked y Unstaged.
Solo debemos ejecutar git add para pararlos al area de staging y git commit para aplicar los cambios en el repositorio.

Como revertir un merge
Si nos hemos equivocado y queremos cancelar el merge, debemos usar el siguiente comando:

git merge --abort

CONFLICTOS CON REPOSITORIOS REMOTOS.

Al trabajr con otras personas, es necesario utilizar un repositorio remotot.
Para copiar el repositorio remoto al directorio de trabajo local, se utiliza el comando git clone <url>,y para enviar cambios al repositorio
remoto se utiliza git push.
Para actualizar el repositorio local se hace uso del comando git fetch, luego se debe fusionar los datos traídos con los locales usando git merge.

Para traer los datos y fusionarlos a la vez, en un solo comando se usa el git pull.
Para crear commits rapidamente fusionando git add y git commit -m "", usamos el comando git commit -am "".
Para generar nuevas ramas, hay que posicionarse sobre la rama que se desea copiar y utilizar el comando git branch <nombre>
Para saltar entre ramas se usa el comando
git checkout <branch>
    una vez realizado los cambios en la rama, estas debe fusionarse con git merge.

El merge ocurre en la rama en la que se está posicionando.Por lo tanto, la rama a fusionar se transforma en la principa.
Los merges también son commits.
Los merges pueden generar conlfictos, esto aborta la acción y pide que soluciones el problema manualmente,aceptando o rechazando los cambios que vienen.

